// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC {
    static readonly AdminClass s_Admin = new AdminClass();
    public static AdminClass Admin { get { return s_Admin; } }
    static readonly NotAdminClass s_NotAdmin = new NotAdminClass();
    public static NotAdminClass NotAdmin { get { return s_NotAdmin; } }
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class AdminClass {
        public readonly string Name = "admin";
        public BetTeamsBattle.Frontend.Areas.Admin.Controllers.AdminBattlesController AdminBattles = new BetTeamsBattle.Frontend.Areas.Admin.Controllers.T4MVC_AdminBattlesController();
        public BetTeamsBattle.Frontend.Areas.Admin.Controllers.AdminTeamsController AdminTeams = new BetTeamsBattle.Frontend.Areas.Admin.Controllers.T4MVC_AdminTeamsController();
        public T4MVC.Admin.SharedController Shared = new T4MVC.Admin.SharedController();
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class NotAdminClass {
        public readonly string Name = "notadmin";
        public BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.AccountsController Accounts = new BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.T4MVC_AccountsController();
        public BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.BattleBetsController BattleBets = new BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.T4MVC_BattleBetsController();
        public BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.BattlesController Battles = new BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.T4MVC_BattlesController();
        public BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.HomeController Home = new BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.T4MVC_HomeController();
        public BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.TeamsController Teams = new BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.T4MVC_TeamsController();
        public BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.UsersController Users = new BetTeamsBattle.Frontend.Areas.NotAdmin.Controllers.T4MVC_UsersController();
        public T4MVC.NotAdmin.SharedController Shared = new T4MVC.NotAdmin.SharedController();
    }
}

   
namespace System.Web.Mvc {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class T4Extensions {
        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes), protocol, hostName, fragment);
        }

        public static MvcHtmlString ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes, string protocol = null, string hostName = null, string fragment = null) {
            return htmlHelper.RouteLink(linkText, null, protocol, hostName, fragment, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result) {
            return htmlHelper.BeginForm(result, FormMethod.Post);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, formMethod, htmlAttributes);
        }

        public static void RenderAction(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            htmlHelper.RenderAction(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }

        public static MvcHtmlString Action(this HtmlHelper htmlHelper, ActionResult result) {
            var callInfo = result.GetT4MVCResult();
            return htmlHelper.Action(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary);
        }
        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary());
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result, string protocol = null, string hostName = null) {
            return urlHelper.RouteUrl(null, result.GetRouteValueDictionary(), protocol, hostName);
        }

        public static string ActionAbsolute(this UrlHelper urlHelper, ActionResult result) {
            return string.Format("{0}{1}",urlHelper.RequestContext.HttpContext.Request.Url.GetLeftPart(UriPartial.Authority),
                urlHelper.RouteUrl(result.GetRouteValueDictionary()));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcHtmlString ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.BeginForm(result, ajaxOptions, null);
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return BeginForm(ajaxHelper, result, ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this AjaxHelper ajaxHelper, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            var callInfo = result.GetT4MVCResult();
            return ajaxHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValueDictionary, ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return MapRoute(routes, name, url, result, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, string[] namespaces) {
            return MapRoute(routes, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRoute(routes, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRoute(routes, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            routes.Add(name, route);
            return route;
        }

        // Note: can't name the AreaRegistrationContext methods 'MapRoute', as that conflicts with the existing methods
        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result) {
            return MapRouteArea(context, name, url, result, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, string[] namespaces) {
            return MapRouteArea(context, name, url, result, null /*defaults*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints) {
            return MapRouteArea(context, name, url, result, defaults, constraints, null /*namespaces*/);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, string[] namespaces) {
            return MapRouteArea(context, name, url, result, defaults, null /*constraints*/, namespaces);
        }

        public static Route MapRouteArea(this AreaRegistrationContext context, string name, string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Create and add the route
            if ((namespaces == null) && (context.Namespaces != null)) {
                 namespaces = context.Namespaces.ToArray();
            }
            var route = CreateRoute(url, result, defaults, constraints, namespaces);
            context.Routes.Add(name, route);
            route.DataTokens["area"] = context.AreaName;
            bool useNamespaceFallback = (namespaces == null) || (namespaces.Length == 0);
            route.DataTokens["UseNamespaceFallback"] = useNamespaceFallback;
            return route;
        }

        private static Route CreateRoute(string url, ActionResult result, object defaults, object constraints, string[] namespaces) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            var routeConstraints = new RouteValueDictionary(constraints);

            // Create and add the route
            var route = new Route(url, routeValues, routeConstraints, new MvcRouteHandler());

            route.DataTokens = new RouteValueDictionary();

            if (namespaces != null && namespaces.Length > 0) {
                route.DataTokens["Namespaces"] = namespaces;
            }

            return route;
        }

        public static IT4MVCActionResult GetT4MVCResult(this ActionResult result) {
            var t4MVCResult = result as IT4MVCActionResult;
            if (t4MVCResult == null) {
                throw new InvalidOperationException("T4MVC was called incorrectly. You may need to force it to regenerate by right clicking on T4MVC.tt and choosing Run Custom Tool");
            }
            return t4MVCResult;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return result.GetT4MVCResult().RouteValueDictionary;
        }

        public static ActionResult AddRouteValues(this ActionResult result, object routeValues) {
            return result.AddRouteValues(new RouteValueDictionary(routeValues));
        }

        public static ActionResult AddRouteValues(this ActionResult result, RouteValueDictionary routeValues) {
            RouteValueDictionary currentRouteValues = result.GetRouteValueDictionary();

            // Add all the extra values
            foreach (var pair in routeValues) {
                currentRouteValues.Add(pair.Key, pair.Value);
            }

            return result;
        }

        public static ActionResult AddRouteValues(this ActionResult result, System.Collections.Specialized.NameValueCollection nameValueCollection) {
            // Copy all the values from the NameValueCollection into the route dictionary
            nameValueCollection.CopyTo(result.GetRouteValueDictionary());
            return result;
        }

        public static ActionResult AddRouteValue(this ActionResult result, string name, object value) {
            RouteValueDictionary routeValues = result.GetRouteValueDictionary();
            routeValues.Add(name, value);
            return result;
        }
        
        public static void InitMVCT4Result(this IT4MVCActionResult result, string area, string controller, string action) {
            result.Controller = controller;
            result.Action = action;
            result.RouteValueDictionary = new RouteValueDictionary();
            result.RouteValueDictionary.Add("Area", area ?? ""); 
            result.RouteValueDictionary.Add("Controller", controller);
            result.RouteValueDictionary.Add("Action", action);
        }

        public static bool FileExists(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return false;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return System.IO.File.Exists(filePath);
        }

        static DateTime CenturyBegin=new DateTime(2001,1,1);
        public static string TimestampString(string virtualPath) {
            if (!HostingEnvironment.IsHosted) return string.Empty;
            string filePath = HostingEnvironment.MapPath(virtualPath);
            return Convert.ToString((System.IO.File.GetLastWriteTimeUtc(filePath).Ticks-CenturyBegin.Ticks)/1000000000,16);            
        }
    }
}



namespace T4MVC {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}


  

   
[GeneratedCode("T4MVC", "2.0")]   
public interface IT4MVCActionResult {   
    string Action { get; set; }   
    string Controller { get; set; }   
    RouteValueDictionary RouteValueDictionary { get; set; }   
}   
  

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }

	public override bool Equals(object obj)
    {
        if (Object.ReferenceEquals(this, obj))
            return true;

        var other = (T4MVC_ActionResult)obj;

        if (this.Controller != other.Controller)
            return false;
        if (this.Action != other.Action)
            return false;

        if (this.RouteValueDictionary.Count != other.RouteValueDictionary.Count)
            return false;
        foreach (var routeKeyValue in this.RouteValueDictionary)
        {
            if (!other.RouteValueDictionary.ContainsKey(routeKeyValue.Key))
                return false;
            var otherRouteValue = other.RouteValueDictionary[routeKeyValue.Key];

            if (!routeKeyValue.Value.Equals(otherRouteValue))
                return false;
        }

        return true;
    }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_PartialViewResult : System.Web.Mvc.PartialViewResult, IT4MVCActionResult {
    public T4MVC_PartialViewResult(string area, string controller, string action): base()  {
        this.InitMVCT4Result(area, controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }

	public override bool Equals(object obj)
    {
        if (Object.ReferenceEquals(this, obj))
            return true;

        var other = (T4MVC_ActionResult)obj;

        if (this.Controller != other.Controller)
            return false;
        if (this.Action != other.Action)
            return false;

        if (this.RouteValueDictionary.Count != other.RouteValueDictionary.Count)
            return false;
        foreach (var routeKeyValue in this.RouteValueDictionary)
        {
            if (!other.RouteValueDictionary.ContainsKey(routeKeyValue.Key))
                return false;
            var otherRouteValue = other.RouteValueDictionary[routeKeyValue.Key];

            if (!routeKeyValue.Value.Equals(otherRouteValue))
                return false;
        }

        return true;
    }
}



namespace Links {
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string jquery_1_6_2_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.6.2-vsdoc.min.js") ? Url("jquery-1.6.2-vsdoc.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery-1.6.2-vsdoc.js") : Url("jquery-1.6.2-vsdoc.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery-1.6.2-vsdoc.js");
                      
        public static readonly string jquery_1_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.6.2.min.js") ? Url("jquery-1.6.2.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery-1.6.2.js") : Url("jquery-1.6.2.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery-1.6.2.js");
                      
        public static readonly string jquery_1_6_2_min_js = Url("jquery-1.6.2.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery-1.6.2.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery.validate-vsdoc.js") : Url("jquery.validate-vsdoc.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery.validate-vsdoc.js");
                      
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery.validate.js") : Url("jquery.validate.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery.validate.js");
                      
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery.validate.unobtrusive.js") : Url("jquery.validate.unobtrusive.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery.validate.unobtrusive.js");
                      
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery.validate.unobtrusive.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class openid_selector {
            private const string URLPATH = "~/Scripts/openid-selector";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Scripts/openid-selector/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string openid_shadow_css = Url("openid-shadow.css")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-shadow.css");
                public static readonly string openid_css = Url("openid.css")+"?"+T4Extensions.TimestampString(URLPATH + "/openid.css");
            }
        
            public static readonly string demo_mootools_html = Url("demo-mootools.html")+"?"+T4Extensions.TimestampString(URLPATH + "/demo-mootools.html");
            public static readonly string demo_prototype_html = Url("demo-prototype.html")+"?"+T4Extensions.TimestampString(URLPATH + "/demo-prototype.html");
            public static readonly string demo_ru_html = Url("demo-ru.html")+"?"+T4Extensions.TimestampString(URLPATH + "/demo-ru.html");
            public static readonly string demo_uk_html = Url("demo-uk.html")+"?"+T4Extensions.TimestampString(URLPATH + "/demo-uk.html");
            public static readonly string demo_html = Url("demo.html")+"?"+T4Extensions.TimestampString(URLPATH + "/demo.html");
            public static readonly string generate_sprite_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/generate-sprite.min.js") ? Url("generate-sprite.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/generate-sprite.js") : Url("generate-sprite.js")+"?"+T4Extensions.TimestampString(URLPATH + "/generate-sprite.js");
                          
            public static readonly string generate_sprite_rb = Url("generate-sprite.rb")+"?"+T4Extensions.TimestampString(URLPATH + "/generate-sprite.rb");
            public static readonly string generate_sprite_sh = Url("generate-sprite.sh")+"?"+T4Extensions.TimestampString(URLPATH + "/generate-sprite.sh");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images {
                private const string URLPATH = "~/Scripts/openid-selector/images";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string openid_inputicon_gif = Url("openid-inputicon.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-inputicon.gif");
                public static readonly string openid_providers_en_png = Url("openid-providers-en.png")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-providers-en.png");
                public static readonly string openid_providers_ru_png = Url("openid-providers-ru.png")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-providers-ru.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images_large {
                private const string URLPATH = "~/Scripts/openid-selector/images.large";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string aol_gif = Url("aol.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/aol.gif");
                public static readonly string facebook_gif = Url("facebook.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/facebook.gif");
                public static readonly string google_gif = Url("google.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/google.gif");
                public static readonly string mailru_gif = Url("mailru.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/mailru.gif");
                public static readonly string myopenid_gif = Url("myopenid.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/myopenid.gif");
                public static readonly string openid_gif = Url("openid.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/openid.gif");
                public static readonly string rambler_gif = Url("rambler.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/rambler.gif");
                public static readonly string verisign_gif = Url("verisign.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/verisign.gif");
                public static readonly string vkontakte_gif = Url("vkontakte.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/vkontakte.gif");
                public static readonly string yahoo_gif = Url("yahoo.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/yahoo.gif");
                public static readonly string yandex_gif = Url("yandex.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/yandex.gif");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images_small {
                private const string URLPATH = "~/Scripts/openid-selector/images.small";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string aol_ico = Url("aol.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/aol.ico");
                public static readonly string aol_ico_gif = Url("aol.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/aol.ico.gif");
                public static readonly string aol_ico_png = Url("aol.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/aol.ico.png");
                public static readonly string blogger_ico = Url("blogger.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/blogger.ico");
                public static readonly string blogger_ico_gif = Url("blogger.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/blogger.ico.gif");
                public static readonly string blogger_ico_png = Url("blogger.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/blogger.ico.png");
                public static readonly string claimid_ico = Url("claimid.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/claimid.ico");
                public static readonly string claimid_ico_gif = Url("claimid.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/claimid.ico.gif");
                public static readonly string claimid_ico_png = Url("claimid.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/claimid.ico.png");
                public static readonly string clickpass_ico = Url("clickpass.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/clickpass.ico");
                public static readonly string clickpass_ico_gif = Url("clickpass.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/clickpass.ico.gif");
                public static readonly string clickpass_ico_png = Url("clickpass.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/clickpass.ico.png");
                public static readonly string facebook_ico = Url("facebook.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/facebook.ico");
                public static readonly string facebook_ico_gif = Url("facebook.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/facebook.ico.gif");
                public static readonly string facebook_ico_png = Url("facebook.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/facebook.ico.png");
                public static readonly string flickr_ico = Url("flickr.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/flickr.ico");
                public static readonly string flickr_ico_gif = Url("flickr.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/flickr.ico.gif");
                public static readonly string flickr_ico_png = Url("flickr.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/flickr.ico.png");
                public static readonly string google_ico = Url("google.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/google.ico");
                public static readonly string google_ico_gif = Url("google.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/google.ico.gif");
                public static readonly string google_ico_png = Url("google.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/google.ico.png");
                public static readonly string google_profile_ico = Url("google_profile.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/google_profile.ico");
                public static readonly string google_profile_ico_gif = Url("google_profile.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/google_profile.ico.gif");
                public static readonly string google_profile_ico_png = Url("google_profile.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/google_profile.ico.png");
                public static readonly string launchpad_ico = Url("launchpad.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/launchpad.ico");
                public static readonly string launchpad_ico_gif = Url("launchpad.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/launchpad.ico.gif");
                public static readonly string launchpad_ico_png = Url("launchpad.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/launchpad.ico.png");
                public static readonly string linkedin_ico = Url("linkedin.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/linkedin.ico");
                public static readonly string linkedin_ico_gif = Url("linkedin.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/linkedin.ico.gif");
                public static readonly string linkedin_ico_png = Url("linkedin.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/linkedin.ico.png");
                public static readonly string livejournal_ico = Url("livejournal.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/livejournal.ico");
                public static readonly string livejournal_ico_gif = Url("livejournal.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/livejournal.ico.gif");
                public static readonly string livejournal_ico_png = Url("livejournal.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/livejournal.ico.png");
                public static readonly string mailru_ico = Url("mailru.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/mailru.ico");
                public static readonly string mailru_ico_gif = Url("mailru.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/mailru.ico.gif");
                public static readonly string mailru_ico_png = Url("mailru.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/mailru.ico.png");
                public static readonly string myopenid_ico = Url("myopenid.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/myopenid.ico");
                public static readonly string myopenid_ico_gif = Url("myopenid.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/myopenid.ico.gif");
                public static readonly string myopenid_ico_png = Url("myopenid.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/myopenid.ico.png");
                public static readonly string openid_ico = Url("openid.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/openid.ico");
                public static readonly string openid_ico_gif = Url("openid.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/openid.ico.gif");
                public static readonly string openid_ico_png = Url("openid.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/openid.ico.png");
                public static readonly string rambler_ico = Url("rambler.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/rambler.ico");
                public static readonly string rambler_ico_gif = Url("rambler.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/rambler.ico.gif");
                public static readonly string rambler_ico_png = Url("rambler.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/rambler.ico.png");
                public static readonly string technorati_ico = Url("technorati.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/technorati.ico");
                public static readonly string technorati_ico_gif = Url("technorati.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/technorati.ico.gif");
                public static readonly string technorati_ico_png = Url("technorati.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/technorati.ico.png");
                public static readonly string twitter_ico = Url("twitter.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/twitter.ico");
                public static readonly string twitter_ico_gif = Url("twitter.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/twitter.ico.gif");
                public static readonly string twitter_ico_png = Url("twitter.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/twitter.ico.png");
                public static readonly string verisign_ico = Url("verisign.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/verisign.ico");
                public static readonly string verisign_ico_gif = Url("verisign.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/verisign.ico.gif");
                public static readonly string verisign_ico_png = Url("verisign.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/verisign.ico.png");
                public static readonly string vidoop_ico = Url("vidoop.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/vidoop.ico");
                public static readonly string vidoop_ico_gif = Url("vidoop.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/vidoop.ico.gif");
                public static readonly string vidoop_ico_png = Url("vidoop.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/vidoop.ico.png");
                public static readonly string vkontakte_ico = Url("vkontakte.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/vkontakte.ico");
                public static readonly string vkontakte_ico_gif = Url("vkontakte.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/vkontakte.ico.gif");
                public static readonly string vkontakte_ico_png = Url("vkontakte.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/vkontakte.ico.png");
                public static readonly string winliveid_ico = Url("winliveid.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/winliveid.ico");
                public static readonly string winliveid_ico_gif = Url("winliveid.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/winliveid.ico.gif");
                public static readonly string winliveid_ico_png = Url("winliveid.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/winliveid.ico.png");
                public static readonly string wordpress_ico = Url("wordpress.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/wordpress.ico");
                public static readonly string wordpress_ico_gif = Url("wordpress.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/wordpress.ico.gif");
                public static readonly string wordpress_ico_png = Url("wordpress.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/wordpress.ico.png");
                public static readonly string yahoo_ico = Url("yahoo.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/yahoo.ico");
                public static readonly string yahoo_ico_gif = Url("yahoo.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/yahoo.ico.gif");
                public static readonly string yahoo_ico_png = Url("yahoo.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/yahoo.ico.png");
                public static readonly string yandex_ico = Url("yandex.ico")+"?"+T4Extensions.TimestampString(URLPATH + "/yandex.ico");
                public static readonly string yandex_ico_gif = Url("yandex.ico.gif")+"?"+T4Extensions.TimestampString(URLPATH + "/yandex.ico.gif");
                public static readonly string yandex_ico_png = Url("yandex.ico.png")+"?"+T4Extensions.TimestampString(URLPATH + "/yandex.ico.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class js {
                private const string URLPATH = "~/Scripts/openid-selector/js";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_1_2_6_min_js = Url("jquery-1.2.6.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/jquery-1.2.6.min.js");
                public static readonly string mootools_core_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mootools-core.min.js") ? Url("mootools-core.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/mootools-core.js") : Url("mootools-core.js")+"?"+T4Extensions.TimestampString(URLPATH + "/mootools-core.js");
                              
                public static readonly string mootools_more_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mootools-more.min.js") ? Url("mootools-more.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/mootools-more.js") : Url("mootools-more.js")+"?"+T4Extensions.TimestampString(URLPATH + "/mootools-more.js");
                              
                public static readonly string openid_de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/openid-de.min.js") ? Url("openid-de.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-de.js") : Url("openid-de.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-de.js");
                              
                public static readonly string openid_en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/openid-en.min.js") ? Url("openid-en.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-en.js") : Url("openid-en.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-en.js");
                              
                public static readonly string openid_jp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/openid-jp.min.js") ? Url("openid-jp.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-jp.js") : Url("openid-jp.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-jp.js");
                              
                public static readonly string openid_jquery_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/openid-jquery.min.js") ? Url("openid-jquery.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-jquery.js") : Url("openid-jquery.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-jquery.js");
                              
                public static readonly string openid_mootools_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/openid-mootools.min.js") ? Url("openid-mootools.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-mootools.js") : Url("openid-mootools.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-mootools.js");
                              
                public static readonly string openid_prototype_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/openid-prototype.min.js") ? Url("openid-prototype.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-prototype.js") : Url("openid-prototype.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-prototype.js");
                              
                public static readonly string openid_ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/openid-ru.min.js") ? Url("openid-ru.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-ru.js") : Url("openid-ru.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-ru.js");
                              
                public static readonly string openid_uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/openid-uk.min.js") ? Url("openid-uk.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-uk.js") : Url("openid-uk.js")+"?"+T4Extensions.TimestampString(URLPATH + "/openid-uk.js");
                              
                public static readonly string prototype_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/prototype.min.js") ? Url("prototype.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/prototype.js") : Url("prototype.js")+"?"+T4Extensions.TimestampString(URLPATH + "/prototype.js");
                              
            }
        
            public static readonly string README_txt = Url("README.txt")+"?"+T4Extensions.TimestampString(URLPATH + "/README.txt");
            public static readonly string remcomments_sed = Url("remcomments.sed")+"?"+T4Extensions.TimestampString(URLPATH + "/remcomments.sed");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string botton_css = Url("botton.css")+"?"+T4Extensions.TimestampString(URLPATH + "/botton.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Bundles {
            private const string URLPATH = "~/Content/Bundles";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string site_css = Url("site.css")+"?"+T4Extensions.TimestampString(URLPATH + "/site.css");
            public static readonly string site_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/site.min.js") ? Url("site.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/site.js") : Url("site.js")+"?"+T4Extensions.TimestampString(URLPATH + "/site.js");
                          
        }
    
        public static readonly string file_css = Url("file.css")+"?"+T4Extensions.TimestampString(URLPATH + "/file.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Content/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class js {
            private const string URLPATH = "~/Content/js";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string blik_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/blik.min.js") ? Url("blik.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/blik.js") : Url("blik.js")+"?"+T4Extensions.TimestampString(URLPATH + "/blik.js");
                          
            public static readonly string tooltip_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tooltip.min.js") ? Url("tooltip.min.js")+"?"+T4Extensions.TimestampString(URLPATH + "/tooltip.js") : Url("tooltip.js")+"?"+T4Extensions.TimestampString(URLPATH + "/tooltip.js");
                          
        }
    
        public static readonly string menu_style_css = Url("menu_style.css")+"?"+T4Extensions.TimestampString(URLPATH + "/menu_style.css");
        public static readonly string tooltip_css = Url("tooltip.css")+"?"+T4Extensions.TimestampString(URLPATH + "/tooltip.css");
    }

}

static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}




	

#endregion T4MVC
#pragma warning restore 1591


