@*Idea is taken from http://stackoverflow.com/questions/4760783/is-it-possible-to-create-a-generic-helper-method-with-razor
Thank you, @chrismilleruk*@
@using System.Linq.Expressions;
@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using SelectListItem = System.Web.Mvc.SelectListItem;
@functions
{
    public static HelperResult TextBox<TModel, TItem>(HtmlHelper<TModel> html, Expression<Func<TModel, TItem>> expr, string title)
    {
        return TextBox(html, expr, title, null);
    }

    public static HelperResult TextBox<TModel, TItem>(HtmlHelper<TModel> html, Expression<Func<TModel, TItem>> expr, string title, string helpMessage)
    {
        return TwoLinesFormElement(html.LabelFor(expr, title), html.TextBoxFor(expr, new { @class = "text-form" }), html.ValidationMessageFor(expr), helpMessage: helpMessage);
    }

    public static HelperResult DropDownList<TModel, TItem>(HtmlHelper<TModel> html, Expression<Func<TModel, TItem>> expr, string title, IEnumerable<SelectListItem> selectList)
    {
        return TwoLinesFormElement(html.LabelFor(expr, title), html.DropDownListFor(expr, selectList, new { @class = "form-select" }), html.ValidationMessageFor(expr));
    }

    public static HelperResult HideableDropDownList<TModel, TItem>(HtmlHelper<TModel> html, Expression<Func<TModel, TItem>> expr, string title, IEnumerable<SelectListItem> selectList)
    {
        return TwoLinesFormElement(html.LabelFor(expr, title), html.DropDownListFor(expr, selectList, new { @class = "form-select" }), html.ValidationMessageFor(expr), visible: selectList.Count() != 1);
    }

    public static HelperResult CheckBox<TModel>(HtmlHelper<TModel> html, Expression<Func<TModel, bool>> expr, string title)
    {
        return CheckBox(html, expr, title);
    }

    public static HelperResult CheckBox<TModel>(HtmlHelper<TModel> html, Expression<Func<TModel, bool>> expr, string title, string helpMessage)
    {
        return OneLineFormElement(html.LabelFor(expr, title), html.CheckBoxFor(expr, new { @class = "g" }), html.ValidationMessageFor(expr), helpMessage);
    }

    public static HelperResult ActionImage(UrlHelper url, ActionResult actionResult, string imageClass, string imageTitle)
    {
        return ActionImage(url.Action(actionResult), imageClass, imageTitle);
    }
}
@helper TwoLinesFormElement(MvcHtmlString label, MvcHtmlString element, MvcHtmlString validationMessage, string helpMessage = null, bool visible = true)
    {
    <div class="stroka_1" 
    @if (!visible)
    {
        @:style="display:none" 
    }>
        <div class="stroka_11">
            <div class="stroka_1_name">
                @label
                @if (helpMessage != null)
                {
                    @HelpMessage(helpMessage)
                }
            </div>
            <div class="stroka_1_form">@element</div>
        </div>
        <div class="stroka_12">
            @validationMessage
        </div>
    </div>
}
@helper OneLineFormElement(MvcHtmlString label, MvcHtmlString element, MvcHtmlString validationMessage, string helpMessage = null)
    {
    <div class="checkbox_n">
        <div class="stroka_1_n">
            @label
            @if (helpMessage != null)
            {
                @HelpMessage(helpMessage)
            }
        </div>
        <div class="stroka_1_f">
            @element @validationMessage
        </div>
    </div>
}
@helper SubmitButton(string label)
    {
    <div class="btn_n">
        <span class="button">
            <input type="submit" value="@label" /></span>
    </div>
}
@helper ActionImage(string url, string imageClass, string imageTitle)
    {
    <a href="@url"><span class="@imageClass" title="@imageTitle" /></a>
}
@helper Image(string imageClass, string imageTitle)
    {
    <span class="@imageClass" title="@imageTitle" />
}
@helper HelpMessage(string helpMessage)
    {
    <a href="" class="tooltip" title="@helpMessage">
        <img class="help" src="/Content/images/help.png" />
    </a>
}